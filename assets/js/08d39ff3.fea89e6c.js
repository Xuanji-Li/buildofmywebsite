"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[639],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(f,l(l({ref:t},p),{},{components:n})):r.createElement(f,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3118:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return c},assets:function(){return p},toc:function(){return u},default:function(){return m}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],o={title:"C#10 + .net core + VS2022"},s=void 0,c={permalink:"/blog/2022/01/19/C-sharp/c-sharp",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-01-19-C-sharp/c-sharp.md",source:"@site/blog/2022-01-19-C-sharp/c-sharp.md",title:"C#10 + .net core + VS2022",description:".net",date:"2022-01-19T00:00:00.000Z",formattedDate:"January 19, 2022",tags:[],readingTime:1.385,truncated:!1,authors:[],prevItem:{title:"MVC principle",permalink:"/blog/2022/01/21/MVC/mvc"},nextItem:{title:"ES6 Destucturing",permalink:"/blog/2022/01/12/ES6-Destructuring/jsvariable"}},p={authorsImageUrls:[]},u=[{value:".net",id:"net",children:[],level:2},{value:"CS &amp; BS",id:"cs--bs",children:[],level:2},{value:"generic in C#",id:"generic-in-c",children:[],level:2},{value:"partical class",id:"partical-class",children:[],level:2}],d={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"net"},".net"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"1.desktop app\n2.web\n3.mobile app\n4.VR mobile game\n")),(0,i.kt)("h2",{id:"cs--bs"},"CS & BS"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"CS : client and server\nhave to install an application on\netc: vs code\n\nBS : browser and server\nonly need a browser\n")),(0,i.kt)("h2",{id:"generic-in-c"},"generic in C#"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"if i dont want to define the type of the element\nsuppost there is a method with two parameters\nif i pass an int, display int\nif its string then display string\nbasically use one method to handle different input value type\n")),(0,i.kt)("h2",{id:"partical-class"},"partical class"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"suppose one class has muptiple methods\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'class PartialTest\n    {\n    string Str_FieldTest;\n    int Int_FieldTest;\n    public void DoTest()\n    {\n    Debug.Print("Test");\n    }\n    }\n')),(0,i.kt)("p",null,"can be written like :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"partial class PartialTest\n    {\n    string Str_FieldTest;\n    int Int_FieldTest;\n    }\n")),(0,i.kt)("p",null,"one file and in another:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'    partial class PartialTest\n    {\n    public void DoTest()\n    {\n    Debug.Print("Test");\n    }\n    }\n')),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"the use of the partial keyword indicates that other parts of the class, structure or interface can be defined within the namespace"),(0,i.kt)("li",{parentName:"ol"},"the partial keyword must be used for all parts"),(0,i.kt)("li",{parentName:"ol"},"each part must have the same accessibility, e.g. public, private, etc."),(0,i.kt)("li",{parentName:"ol"},"if any part is declared as abstract, the whole type is considered abstract"),(0,i.kt)("li",{parentName:"ol"},"if any part is declared as sealed, the whole type is considered sealed"),(0,i.kt)("li",{parentName:"ol"},"if any part is declared to inherit from a base class, the whole type will inherit from that class"),(0,i.kt)("li",{parentName:"ol"},"each part may specify a different base interface and the final type will implement all the interfaces listed in all the divisional declarations"),(0,i.kt)("li",{parentName:"ol"},"any class, structure or interface member declared in a divisional definition is available to all other divisions")))}m.isMDXComponent=!0}}]);